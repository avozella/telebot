import base64
import jwt
import hashlib
import requests
import time
import json
import urllib.parse
from api_token import base_url, application_id, api_key

def create_checksum(http_method, raw_url, headers, request_body):
    string_to_hash = http_method.upper() + '|' + raw_url.lower() + '|' + headers + '|' + request_body
    base64_string = base64.b64encode(hashlib.sha256(str.encode(string_to_hash)).digest()).decode('utf-8')
    return base64_string

def create_jwt_token(appication_id, api_key, http_method, raw_url, headers, request_body,
                     iat=time.time(), algorithm='HS256', version='V1'):
    payload = {'appid': appication_id,
               'iat': iat,
               'version': version,
               'checksum': create_checksum(http_method, raw_url, headers, request_body)}
    token = jwt.encode(payload, api_key, algorithm=algorithm)
    return token 

productAgentAPIPath = '/WebApp/IOCBackend/OpenIOCResource/File'
canonicalRequestHeaders = ''
useQueryString = '' 

FileName = input("Ingrese nombre de archivo: ")
FileContentBase64 = input("Ingrese hash: ")

payload = {"param":[{"FileName": FileName,"FileContentBase64":FileContentBase64}]}


"""
"FileName": "cryptolocker1.ioc",
"FileContentBase64":"PCEtLQ0KCVNUSVggRG9tYWluIFdhdGNobGlzdCBFeGFtcGxlDQoJDQoJQ29weXJpZ2h0IChjKSAyMDEzLCBUaGUgTUlUUkUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuIA0KICAgIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBTVElYIExpY2Vuc2UgbG9jYXRlZCBhdCBodHRwOi8vc3RpeC5taXRyZS5vcmcvYWJvdXQvdGVybXNvZnVzZS5odG1sLg0KICAgIA0KCVRoaXMgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgb25lIG1ldGhvZCBvZiByZXByZXNlbnRpbmcgYSBkb21haW4gd2F0Y2hsaXN0IChsaXN0IG9mIG1hbGljaW91cyBkb21haW5zKSBpbiBTVElYIGFuZCBDeWJPWC4gSXQgZGVtb25zdHJhdGVzIHNldmVyYWwgU1RJWC9DeWJPWCBjb25jZXB0cyBhbmQgYmVzdCBwcmFjdGljZXMgaW5jbHVkaW5nOg0KCQ0KCSAgICogSW5kaWNhdG9ycw0KCSAgICogQ3liT1ggd2l0aGluIFNUSVgNCgkgICAqIFRoZSBDeWJPWCBVUkkgb2JqZWN0DQoJICAgKiBDb250cm9sbGVkIHZvY2FidWxhcmllcw0KCQ0KCUNyZWF0ZWQgYnkgTWFyayBEYXZpZHNvbg0KLS0+DQo8c3RpeDpTVElYX1BhY2thZ2UNCiAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIg0KICAgIHhtbG5zOnN0aXg9Imh0dHA6Ly9zdGl4Lm1pdHJlLm9yZy9zdGl4LTEiDQogICAgeG1sbnM6aW5kaWNhdG9yPSJodHRwOi8vc3RpeC5taXRyZS5vcmcvSW5kaWNhdG9yLTIiDQogICAgeG1sbnM6Y3lib3g9Imh0dHA6Ly9jeWJveC5taXRyZS5vcmcvY3lib3gtMiINCiAgICB4bWxuczpVUklPYmplY3Q9Imh0dHA6Ly9jeWJveC5taXRyZS5vcmcvb2JqZWN0cyNVUklPYmplY3QtMiINCiAgICB4bWxuczpjeWJveFZvY2Ficz0iaHR0cDovL2N5Ym94Lm1pdHJlLm9yZy9kZWZhdWx0X3ZvY2FidWxhcmllcy0yIg0KICAgIHhtbG5zOnN0aXhWb2NhYnM9Imh0dHA6Ly9zdGl4Lm1pdHJlLm9yZy9kZWZhdWx0X3ZvY2FidWxhcmllcy0xIg0KICAgIHhtbG5zOmV4YW1wbGU9Imh0dHA6Ly9leGFtcGxlLmNvbS8iDQogICAgeHNpOnNjaGVtYUxvY2F0aW9uPQ0KICAgICJodHRwOi8vc3RpeC5taXRyZS5vcmcvc3RpeC0xIC4uL3N0aXhfY29yZS54c2QNCiAgICBodHRwOi8vc3RpeC5taXRyZS5vcmcvSW5kaWNhdG9yLTIgLi4vaW5kaWNhdG9yLnhzZA0KICAgIGh0dHA6Ly9jeWJveC5taXRyZS5vcmcvZGVmYXVsdF92b2NhYnVsYXJpZXMtMiAuLi9jeWJveC9jeWJveF9kZWZhdWx0X3ZvY2FidWxhcmllcy54c2QNCiAgICBodHRwOi8vc3RpeC5taXRyZS5vcmcvZGVmYXVsdF92b2NhYnVsYXJpZXMtMSAuLi9zdGl4X2RlZmF1bHRfdm9jYWJ1bGFyaWVzLnhzZA0KICAgIGh0dHA6Ly9jeWJveC5taXRyZS5vcmcvb2JqZWN0cyNVUklPYmplY3QtMiAuLi9jeWJveC9vYmplY3RzL1VSSV9PYmplY3QueHNkIg0KICAgIGlkPSJleGFtcGxlOlNUSVhQYWNrYWdlLWY2MWNkODc0LTQ5NGQtNDE5NC1hM2U2LTZiNDg3ZGJiNmQ2ZSINCiAgICB2ZXJzaW9uPSIxLjAuMSINCiAgICA+DQogICAgPHN0aXg6U1RJWF9IZWFkZXI+DQogICAgICAgIDxzdGl4OlRpdGxlPkV4YW1wbGUgd2F0Y2hsaXN0IHRoYXQgY29udGFpbnMgZG9tYWluIGluZm9ybWF0aW9uLjwvc3RpeDpUaXRsZT4NCiAgICAgICAgPHN0aXg6UGFja2FnZV9JbnRlbnQgeHNpOnR5cGU9InN0aXhWb2NhYnM6UGFja2FnZUludGVudFZvY2FiLTEuMCI+SW5kaWNhdG9ycyAtIFdhdGNobGlzdDwvc3RpeDpQYWNrYWdlX0ludGVudD4NCiAgICA8L3N0aXg6U1RJWF9IZWFkZXI+DQogICAgPHN0aXg6SW5kaWNhdG9ycz4NCiAgICAgICAgPHN0aXg6SW5kaWNhdG9yIHhzaTp0eXBlPSJpbmRpY2F0b3I6SW5kaWNhdG9yVHlwZSIgaWQ9ImV4YW1wbGU6SW5kaWNhdG9yLTJlMjBjNWIyLTU2ZmEtNDZjZC05NjYyLThmMTk5YzY5ZDJjOSI+DQogICAgICAgICAgICA8aW5kaWNhdG9yOlR5cGUgeHNpOnR5cGU9InN0aXhWb2NhYnM6SW5kaWNhdG9yVHlwZVZvY2FiLTEuMCI+RG9tYWluIFdhdGNobGlzdDwvaW5kaWNhdG9yOlR5cGU+DQogICAgICAgICAgICA8aW5kaWNhdG9yOkRlc2NyaXB0aW9uPlNhbXBsZSBkb21haW4gSW5kaWNhdG9yIGZvciB0aGlzIHdhdGNobGlzdDwvaW5kaWNhdG9yOkRlc2NyaXB0aW9uPg0KICAgICAgICAgICAgPGluZGljYXRvcjpPYnNlcnZhYmxlIGlkPSJleGFtcGxlOk9ic2VydmFibGUtODdjOWE1YmItZDAwNS00YjNlLTgwODEtOTlmNzIwZmFkNjJiIj4NCiAgICAgICAgICAgICAgICA8Y3lib3g6T2JqZWN0IGlkPSJleGFtcGxlOk9iamVjdC0xMmM3NjBiYS1jZDJjLTRmNWQtYTM3ZC0xODIxMmVhYzc5MjgiPg0KICAgICAgICAgICAgICAgICAgICA8Y3lib3g6UHJvcGVydGllcyB4c2k6dHlwZT0iVVJJT2JqZWN0OlVSSU9iamVjdFR5cGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPFVSSU9iamVjdDpWYWx1ZSBjb25kaXRpb249IkVxdWFscyIgYXBwbHlfY29uZGl0aW9uPSJBTlkiPm1hbGljaW91czEuZXhhbXBsZS5jb20jI2NvbW1hIyNtYWxpY2lvdXMyLmV4YW1wbGUuY29tIyNjb21tYSMjbWFsaWNpb3VzMy5leGFtcGxlLmNvbTwvVVJJT2JqZWN0OlZhbHVlPg0KICAgICAgICAgICAgICAgICAgICA8L2N5Ym94OlByb3BlcnRpZXM+DQogICAgICAgICAgICAgICAgPC9jeWJveDpPYmplY3Q+DQogICAgICAgICAgICA8L2luZGljYXRvcjpPYnNlcnZhYmxlPg0KICAgICAgICA8L3N0aXg6SW5kaWNhdG9yPg0KICAgIDwvc3RpeDpJbmRpY2F0b3JzPg0KPC9zdGl4OlNUSVhfUGFja2FnZT4="
    },
    {
      "FileName": "cryptolocker2.ioc",
      "FileContentBase64":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXMtYXNjaWkiPz4NCjxpb2MgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeG1sbnM6eHNkPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgaWQ9ImExM2UyODJkLTY1ZTEtNDI2My05YjMxLTVmOTEyNTE1Mjg4YyIgbGFzdC1tb2RpZmllZD0iMjAxMy0xMC0zMFQxOTowNzo0NiIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1hbmRpYW50LmNvbS8yMDEwL2lvYyI+DQogIDxzaG9ydF9kZXNjcmlwdGlvbj5DcnlwdG9sb2NrZXIgRGV0ZWN0aW9uIChFWFBFUklNRU5UQUwpPC9zaG9ydF9kZXNjcmlwdGlvbj4NCiAgPGRlc2NyaXB0aW9uPlRoaXMgSU9DIGRldGVjdHMgcmVnaXN0cnkgZW50cmllcyBjcmVhdGVkIHdoZW4gdGhlIENyeXB0b2xvY2tlciBjcmltZXdhcmUgcnVucy4gUHJlc2VuY2Ugb2Ygb25lIG9mIHRoZXNlIHJlZ2lzdHJ5IGtleSBzaG93cyB0aGF0IGEgYm94IGhhcyBsaWtlbHkgYmVlbiBpbmZlY3RlZCB3aXRoIHRoZSBDcnlwdG9sb2NrZXIgc29mdHdhcmUuPC9kZXNjcmlwdGlvbj4NCiAgPGF1dGhvcmVkX2J5Pk1hbmRpYW50PC9hdXRob3JlZF9ieT4NCiAgPGF1dGhvcmVkX2RhdGU+MjAxMy0xMC0yOFQxNDoyNzoxMjwvYXV0aG9yZWRfZGF0ZT4NCiAgPGxpbmtzPg0KICAgIDxsaW5rIHJlbD0iZ3JhZGUiPnVudGVzdGVkPC9saW5rPg0KICA8L2xpbmtzPg0KICA8ZGVmaW5pdGlvbj4NCiAgICA8SW5kaWNhdG9yIG9wZXJhdG9yPSJPUiIgaWQ9IjdlYTYwNWI3LThhYjEtNGUxYy05MTI4LTk5OTI2NWNkOWYyMSI+DQogICAgICA8SW5kaWNhdG9ySXRlbSBpZD0iYTcxZWIwZDctYWZlNS00NzA4LThkYmItMzc5YmQ0M2NjOWQ3IiBjb25kaXRpb249ImNvbnRhaW5zIj4NCiAgICAgICAgPENvbnRleHQgZG9jdW1lbnQ9IlJlZ2lzdHJ5SXRlbSIgc2VhcmNoPSJSZWdpc3RyeUl0ZW0vUGF0aCIgdHlwZT0ibWlyIiAvPg0KICAgICAgICA8Q29udGVudCB0eXBlPSJzdHJpbmciPlNvZnR3YXJlXENyeXB0b0xvY2tlclxGaWxlczwvQ29udGVudD4NCiAgICAgIDwvSW5kaWNhdG9ySXRlbT4NCiAgICAgIDxJbmRpY2F0b3Igb3BlcmF0b3I9IkFORCIgaWQ9ImJmYmVmOGEyLTdmMTktNDAwZC04Yjg5LTg3ZjdjNzYwNzhhZSI+DQogICAgICAgIDxJbmRpY2F0b3JJdGVtIGlkPSI0MmU5Njk5OC03MTYxLTRmMjItYmI3Ny03MzY2MGUyNjlhNmIiIGNvbmRpdGlvbj0iY29udGFpbnMiPg0KICAgICAgICAgIDxDb250ZXh0IGRvY3VtZW50PSJSZWdpc3RyeUl0ZW0iIHNlYXJjaD0iUmVnaXN0cnlJdGVtL1BhdGgiIHR5cGU9Im1pciIgLz4NCiAgICAgICAgICA8Q29udGVudCB0eXBlPSJzdHJpbmciPkN1cnJlbnRWZXJzaW9uXFJ1bjwvQ29udGVudD4NCiAgICAgICAgPC9JbmRpY2F0b3JJdGVtPg0KICAgICAgICA8SW5kaWNhdG9ySXRlbSBpZD0iNWQ1YjgyOTYtMDFjOS00MTQ2LTlhNzQtYWJhNTMxYzU3NDc5IiBjb25kaXRpb249ImNvbnRhaW5zIj4NCiAgICAgICAgICA8Q29udGV4dCBkb2N1bWVudD0iUmVnaXN0cnlJdGVtIiBzZWFyY2g9IlJlZ2lzdHJ5SXRlbS9QYXRoIiB0eXBlPSJtaXIiIC8+DQogICAgICAgICAgPENvbnRlbnQgdHlwZT0ic3RyaW5nIj5DcnlwdG9sb2NrZXI8L0NvbnRlbnQ+DQogICAgICAgIDwvSW5kaWNhdG9ySXRlbT4NCiAgICAgIDwvSW5kaWNhdG9yPg0KICAgIDwvSW5kaWNhdG9yPg0KICA8L2RlZmluaXRpb24+DQo8L2lvYz4="
    }
  ]
}"""


useRequestBody = json.dumps(payload) 

 
jwt_token = create_jwt_token(application_id, api_key, 'POST',
                              productAgentAPIPath + useQueryString,
                              canonicalRequestHeaders, useRequestBody, iat=time.time())

headers = {'Authorization': 'Bearer ' + jwt_token , 'Content-Type': 'application/json;charset=utf-8'}
#Choose by call type.
r = requests.post(base_url + productAgentAPIPath + useQueryString, headers=headers, data=useRequestBody, verify=False) 

print(r.status_code)
print(json.dumps(r.json(), indent=4))
